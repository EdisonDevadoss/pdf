export declare class Pdf {
    static open(docOpts: any, genOpts: any): any;
    static getTitle(options: any): {
        style: string[];
        text: any;
    };
    static getTenant(options: any): {
        style: string[];
        layout: {
            hLineWidth: (i: any, node: any) => number;
            vLineWidth: (i: any, node: any) => number;
        };
        table: {
            widths: string[];
            body: ({
                text: ({
                    style: string[];
                    text: string;
                } | string)[];
            } | {
                image: any;
                width: number;
                height: number;
            } | string)[][];
        };
    };
    static getInfo(left: any, right: any): {
        style: string[];
        columns: ({
            text: any;
        } | {
            width: number;
            columns: any;
        })[];
    };
    static getFooter(options: any): {
        style: string[];
        text: any;
    };
    static getStandardTable(header: any, body: any): {
        style: string[];
        layout: {
            hLineWidth: (i: any, node: any) => number;
            vLineWidth: (i: any, node: any) => number;
            hLineColor: (i: any, node: any) => string;
            vLineColor: (i: any, node: any) => string;
            paddingLeft: (i: any, node: any) => number;
            paddingRight: (i: any, node: any) => number;
            paddingTop: (i: any, node: any) => number;
            paddingBottom: (i: any, node: any) => number;
        };
        table: {
            widths: number[];
            body: any;
        };
    };
    static getSubtotalTable(options: any): {
        style: string[];
        layout: {
            hLineWidth: (i: any, node: any) => number;
            vLineWidth: (i: any, node: any) => number;
            hLineColor: (i: any, node: any) => string;
            vLineColor: (i: any, node: any) => string;
            paddingLeft: (i: any, node: any) => number;
            paddingRight: (i: any, node: any) => number;
            paddingTop: (i: any, node: any) => number;
            paddingBottom: (i: any, node: any) => number;
        };
        table: {
            widths: number[];
            body: any[];
        };
    };
    static getSummaryTable(options: any): {
        style: string[];
        layout: {
            hLineWidth: (i: any, node: any) => number;
            vLineWidth: (i: any, node: any) => number;
            hLineColor: (i: any, node: any) => string;
            vLineColor: (i: any, node: any) => string;
            paddingLeft: (i: any, node: any) => number;
            paddingRight: (i: any, node: any) => number;
            paddingTop: (i: any, node: any) => number;
            paddingBottom: (i: any, node: any) => number;
        };
        table: {
            widths: number[];
            body: any;
        };
    };
    static getBase(): {
        defaultStyle: {
            font: string;
        };
        pageSize: string;
        pageMargins: number[];
        header: any[];
        footer: any[];
        content: any[];
        styles: {
            'font-8': {
                fontSize: number;
            };
            'font-9': {
                fontSize: number;
            };
            'font-10': {
                fontSize: number;
            };
            'font-14': {
                fontSize: number;
            };
            'font-16': {
                fontSize: number;
            };
            bold: {
                bold: boolean;
            };
            'margin-top-30': {
                marginTop: number;
            };
            'margin-top-40': {
                marginTop: number;
            };
            'margin-left-316': {
                marginLeft: number;
            };
            'margin-left-50': {
                marginLeft: number;
            };
            'margin-right-50': {
                marginRight: number;
            };
            'fill-gray': {
                fillColor: string;
            };
            center: {
                alignment: string;
            };
            right: {
                alignment: string;
            };
        };
    };
    static getFonts(): {
        'franklin-gothic-book': {
            normal: string;
            bold: string;
            italics: string;
            bolditalics: string;
        };
    };
}

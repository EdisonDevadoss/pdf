"use strict";
const R = require('ramda');
class Pdf {
    static open(docOpts, genOpts) {
        let generator = pdfMake;
        generator.fonts = genOpts.fonts;
        let dd = docOpts.base;
        const addTenant = (docOpts.tenant) ? dd.header.push(docOpts.tenant) : '';
        const addTitle = (docOpts.title) ? dd.header.push(docOpts.title) : '';
        const addInfo = (docOpts.info) ? dd.header.push(docOpts.info) : '';
        const addFooter = (docOpts.info) ? dd.footer.push(docOpts.footer) : '';
        const addStandardTable = (docOpts.standardTable) ? dd.content.push(docOpts.standardTable) : '';
        const addSubtotalTable = (docOpts.subtotalTable) ? dd.content.push(docOpts.subtotalTable) : '';
        const addSummaryTable = (docOpts.summaryTable) ? dd.content.push(docOpts.summaryTable) : '';
        return generator.createPdf(dd).open();
    }
    static getTitle(options) {
        return { style: ['bold', 'font-16', 'margin-left-50'],
            text: options };
    }
    static getTenant(options) {
        return {
            style: ['margin-right-50', 'font-8', 'right', 'margin-top-30'],
            layout: { hLineWidth: (i, node) => 0, vLineWidth: (i, node) => 0 },
            table: {
                widths: (options.$logoBase64) ? ['*', '50'] : ['*', '0'],
                body: [
                    [
                        { text: [
                                { style: ['bold', 'font-9'], text: `${options.brandName}\n` },
                                `${options.name}\n`,
                                `${options.address}\n`,
                                `${options.registrationCode}\n`,
                            ] },
                        (options.$logoBase64) ?
                            {
                                image: options.$logoBase64,
                                width: 48,
                                height: 48,
                            } :
                            ''
                    ]
                ],
            }
        };
    }
    static getInfo(left, right) {
        return {
            style: ['margin-top-40', 'margin-right-50', 'margin-left-50', 'font-10'],
            columns: [
                { text: left },
                { width: 150, columns: right }
            ]
        };
    }
    static getFooter(options) {
        return { style: ['font-8', 'margin-left-50', 'margin-right-50'],
            text: options };
    }
    static getStandardTable(header, body) {
        const paddingBottomPx = (10 - (body.length % 10)) * 30;
        const layout = {
            hLineWidth: (i, node) => 0.5,
            vLineWidth: (i, node) => 0.5,
            hLineColor: (i, node) => (i === 1 || i === 0 || i === node.table.body.length) ? 'black' : 'white',
            vLineColor: (i, node) => 'black',
            paddingLeft: (i, node) => 5,
            paddingRight: (i, node) => 5,
            paddingTop: (i, node) => 5,
            paddingBottom: (i, node) => {
                if (i === (node.table.body.length - 1)) {
                    return paddingBottomPx;
                }
                if (i === 0) {
                    return 5;
                }
                return 10;
            },
        };
        return {
            style: ['font-9'],
            layout: layout,
            table: {
                widths: [305, 80, 80],
                body: R.concat([header], body)
            }
        };
    }
    static getSubtotalTable(options) {
        const layout = {
            hLineWidth: (i, node) => (i === 0) ? 0 : 0.5,
            vLineWidth: (i, node) => 0.5,
            hLineColor: (i, node) => 'black',
            vLineColor: (i, node) => 'black',
            paddingLeft: (i, node) => 5,
            paddingRight: (i, node) => 4.7,
            paddingTop: (i, node) => 5,
            paddingBottom: (i, node) => 5,
        };
        return {
            style: ['margin-left-316', 'font-9'],
            layout: layout,
            table: {
                widths: [80, 80],
                body: [options],
            }
        };
    }
    static getSummaryTable(options) {
        const layout = {
            hLineWidth: (i, node) => (i >= (node.table.body.length - 1)) ? 0.5 : 0,
            vLineWidth: (i, node) => 0,
            hLineColor: (i, node) => 'black',
            vLineColor: (i, node) => 'black',
            paddingLeft: (i, node) => (i >= (node.table.body.length - 1)) ? 0 : 5,
            paddingRight: (i, node) => (i >= (node.table.body.length - 1)) ? 0 : 5,
            paddingTop: (i, node) => 5,
            paddingBottom: (i, node) => 5,
        };
        return {
            style: ['margin-left-316', 'font-9'],
            layout: layout,
            table: {
                widths: [80, 80],
                body: options,
            }
        };
    }
    static getBase() {
        return {
            defaultStyle: { font: 'franklin-gothic-book' },
            pageSize: 'A4',
            pageMargins: [50, 290, 50, 120],
            header: [],
            footer: [],
            content: [],
            styles: {
                'font-8': { fontSize: 8 },
                'font-9': { fontSize: 9 },
                'font-10': { fontSize: 10 },
                'font-14': { fontSize: 14 },
                'font-16': { fontSize: 16 },
                bold: { bold: true },
                'margin-top-30': { marginTop: 30 },
                'margin-top-40': { marginTop: 40 },
                'margin-left-316': { marginLeft: 316 },
                'margin-left-50': { marginLeft: 50 },
                'margin-right-50': { marginRight: 50 },
                'fill-gray': { fillColor: '#f4f4f4' },
                center: { alignment: 'center' },
                right: { alignment: 'right' }
            },
        };
    }
    static getFonts() {
        return { 'franklin-gothic-book': {
                normal: 'Franklin Gothic Book Regular.ttf',
                bold: 'Franklin Gothic Bold.ttf',
                italics: 'Franklin Gothic Book Italic.ttf',
                bolditalics: 'Franklin Gothic Bold Italic.ttf'
            }
        };
    }
}
exports.Pdf = Pdf;
